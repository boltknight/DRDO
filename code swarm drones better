import java.time.Instant;
import java.time.ZonedDateTime;
import java.util.*;

class DroneSwarm {
    private List<Drone> drones;
    private Map<String, Mission> missions;
    
    public DroneSwarm() {
        this.drones = new ArrayList<>();
        this.missions = new HashMap<>();
    }

    public void initializeFromTransactions(List<Transaction> transactions) {
        for (Transaction tx : transactions) {
            Drone drone = new Drone(
                UUID.randomUUID().toString(),
                generateRandomCoordinates(),
                Math.abs(tx.getAmount()) // Using transaction amount for payload capacity
            );
            drones.add(drone);
            
            Mission mission = new Mission(
                tx.getTransactionId(),
                tx.getCreatedTime(),
                tx.getLastUpdatedTime()
            );
            missions.put(tx.getTransactionId(), mission);
        }
    }

    private Coordinates generateRandomCoordinates() {
        // Generate random coordinates within reasonable bounds
        double lat = 18.5204 + (Math.random() * 0.1); // Approximate coordinates
        double lon = 73.8567 + (Math.random() * 0.1); // for demonstration
        double alt = 100 + (Math.random() * 900); // Altitude between 100-1000m
        return new Coordinates(lat, lon, alt);
    }

    public void executeSwarmOperation() {
        for (Drone drone : drones) {
            drone.updateStatus();
            drone.calculateSurveillanceProbability();
        }
    }

    public void printSwarmStatus() {
        System.out.println("\nSwarm Status Report");
        System.out.println("===================");
        for (Drone drone : drones) {
            System.out.println(drone.toString());
        }
    }
}

class Drone {
    private String id;
    private Coordinates location;
    private double payloadCapacity;
    private double currentPayload;
    private double surveillanceProbability;
    private DroneStatus status;

    public Drone(String id, Coordinates location, double payloadCapacity) {
        this.id = id;
        this.location = location;
        this.payloadCapacity = payloadCapacity;
        this.currentPayload = payloadCapacity;
        this.status = DroneStatus.ACTIVE;
        this.surveillanceProbability = 0.0;
    }

    public void updateStatus() {
        if (currentPayload < payloadCapacity * 0.1) {
            status = DroneStatus.LOW_RESOURCES;
        }
    }

    public void calculateSurveillanceProbability() {
        // Calculate probability based on altitude and payload
        double altitudeFactor = Math.min(1.0, location.getAltitude() / 1000.0);
        double payloadFactor = currentPayload / payloadCapacity;
        this.surveillanceProbability = (altitudeFactor + payloadFactor) / 2.0;
    }

    @Override
    public String toString() {
        return String.format("Drone %s: Location=%s, Payload=%.2f/%.2f, Probability=%.2f, Status=%s",
            id, location, currentPayload, payloadCapacity, surveillanceProbability, status);
    }
}

class Coordinates {
    private double latitude;
    private double longitude;
    private double altitude;

    public Coordinates(double latitude, double longitude, double altitude) {
        this.latitude = latitude;
        this.longitude = longitude;
        this.altitude = altitude;
    }

    public double getAltitude() {
        return altitude;
    }

    @Override
    public String toString() {
        return String.format("(%.4f, %.4f, %.1fm)", latitude, longitude, altitude);
    }
}

class Mission {
    private String id;
    private Instant startTime;
    private Instant endTime;
    private MissionStatus status;

    public Mission(String id, Instant startTime, Instant endTime) {
        this.id = id;
        this.startTime = startTime;
        this.endTime = endTime;
        this.status = MissionStatus.IN_PROGRESS;
    }
}

class Transaction {
    private String transactionId;
    private double amount;
    private Instant createdTime;
    private Instant lastUpdatedTime;

    public Transaction(String transactionId, double amount, Instant createdTime, Instant lastUpdatedTime) {
        this.transactionId = transactionId;
        this.amount = amount;
        this.createdTime = createdTime;
        this.lastUpdatedTime = lastUpdatedTime;
    }

    public String getTransactionId() { return transactionId; }
    public double getAmount() { return amount; }
    public Instant getCreatedTime() { return createdTime; }
    public Instant getLastUpdatedTime() { return lastUpdatedTime; }
}

enum DroneStatus {
    ACTIVE, LOW_RESOURCES, MAINTENANCE, OFFLINE
}

enum MissionStatus {
    PLANNED, IN_PROGRESS, COMPLETED, ABORTED
}

public class SwarmDroneSystem {
    public static void main(String[] args) {
        // Sample usage
        List<Transaction> transactions = new ArrayList<>();
        // Add transactions from the CSV data
        transactions.add(new Transaction("1918856650", -1430, 
            Instant.parse("2024-05-22T17:47:25Z"), 
            Instant.parse("2024-05-22T18:00:12Z")));
        transactions.add(new Transaction("1883934565", -1994,
            Instant.parse("2024-05-08T09:00:22Z"),
            Instant.parse("2024-05-08T09:15:13Z")));
        // Add more transactions...

        DroneSwarm swarm = new DroneSwarm();
        swarm.initializeFromTransactions(transactions);
        swarm.executeSwarmOperation();
        swarm.printSwarmStatus();
    }
}

// image visualization :

<svg viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="800" height="600" fill="#f0f0f0"/>
  
  <!-- Road -->
  <rect x="160" y="420" width="400" height="40" fill="#333333"/>
  
  <!-- Trees (Added) -->
  <!-- Tree 1 -->
  <g transform="translate(100,350)">
    <rect x="-5" y="0" width="10" height="30" fill="#8B4513"/>
    <circle cx="0" cy="-15" r="20" fill="#228B22"/>
  </g>
  
  <!-- Tree 2 -->
  <g transform="translate(150,380)">
    <rect x="-5" y="0" width="10" height="25" fill="#8B4513"/>
    <circle cx="0" cy="-15" r="15" fill="#228B22"/>
  </g>
  
  <!-- Tree 3 -->
  <g transform="translate(600,320)">
    <rect x="-6" y="0" width="12" height="35" fill="#8B4513"/>
    <circle cx="0" cy="-20" r="25" fill="#228B22"/>
  </g>
  
  <!-- Tree 4 (Pine style) -->
  <g transform="translate(680,360)">
    <rect x="-4" y="0" width="8" height="30" fill="#8B4513"/>
    <polygon points="-20,0 20,0 0,-40" fill="#006400"/>
    <polygon points="-15,-20 15,-20 0,-50" fill="#006400"/>
  </g>
  
  <!-- Building -->
  <rect x="240" y="180" width="120" height="120" fill="#808080"/>
  
  <!-- Shed -->
  <rect x="480" y="240" width="60" height="60" fill="#8B4513"/>
  
  <!-- Drones with surveillance radius -->
  <g>
    <circle cx="300" cy="200" r="50" fill="rgba(0,0,255,0.1)"/>
    <circle cx="300" cy="200" r="5" fill="blue"/>
  </g>
  <g>
    <circle cx="450" cy="300" r="40" fill="rgba(0,0,255,0.1)"/>
    <circle cx="450" cy="300" r="5" fill="blue"/>
  </g>
  
  <!-- Legend -->
  <g transform="translate(20,20)">
    <rect x="0" y="0" width="120" height="120" fill="white" stroke="#ccc"/>
    <text x="10" y="20" font-size="12">Legend:</text>
    <rect x="10" y="30" width="20" height="20" fill="#808080"/>
    <text x="35" y="45" font-size="10">Building</text>
    <rect x="10" y="55" width="20" height="20" fill="#8B4513"/>
    <text x="35" y="70" font-size="10">Shed</text>
    <circle cx="20" cy="95" r="10" fill="#228B22"/>
    <text x="35" y="100" font-size="10">Trees</text>
  </g>
</svg>

// java code:
import java.time.Instant;
import java.util.*;
import java.awt.*;
import javax.swing.*;
import java.awt.geom.*;

class VisualizationFrame extends JFrame {
    private SwarmPanel swarmPanel;

    public VisualizationFrame(DroneSwarm swarm, List<Structure> structures) {
        setTitle("Drone Swarm Visualization");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        swarmPanel = new SwarmPanel(swarm, structures);
        add(swarmPanel);
    }
}

class SwarmPanel extends JPanel {
    private DroneSwarm swarm;
    private List<Structure> structures;
    
    public SwarmPanel(DroneSwarm swarm, List<Structure> structures) {
        this.swarm = swarm;
        this.structures = structures;
        setBackground(Color.WHITE);
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        // Draw structures
        for (Structure structure : structures) {
            drawStructure(g2d, structure);
        }
        
        // Draw drones
        for (Drone drone : swarm.getDrones()) {
            drawDrone(g2d, drone);
        }
    }
    
    private void drawStructure(Graphics2D g2d, Structure structure) {
        int x = (int) (structure.getLocation().getX() * getWidth());
        int y = (int) (structure.getLocation().getY() * getHeight());
        
        switch (structure.getType()) {
            case BUILDING:
                g2d.setColor(Color.GRAY);
                g2d.fillRect(x, y, 60, 60);
                break;
            case SHED:
                g2d.setColor(Color.BROWN);
                g2d.fillRect(x, y, 30, 30);
                break;
            case ROAD:
                g2d.setColor(Color.BLACK);
                g2d.fillRect(x, y, 100, 20);
                break;
        }
    }
    
    private void drawDrone(Graphics2D g2d, Drone drone) {
        int x = (int) (drone.getLocation().getX() * getWidth());
        int y = (int) (drone.getLocation().getY() * getHeight());
        
        // Draw drone body
        g2d.setColor(Color.BLUE);
        g2d.fillOval(x-5, y-5, 10, 10);
        
        // Draw surveillance radius
        g2d.setColor(new Color(0, 0, 255, 50));
        int radius = (int) (drone.getSurveillanceProbability() * 50);
        g2d.fillOval(x-radius, y-radius, radius*2, radius*2);
    }
}

enum StructureType {
    BUILDING, SHED, ROAD
}

class Structure {
    private StructureType type;
    private Point2D.Double location;
    private double width;
    private double height;

    public Structure(StructureType type, Point2D.Double location, double width, double height) {
        this.type = type;
        this.location = location;
        this.width = width;
        this.height = height;
    }

    public StructureType getType() { return type; }
    public Point2D.Double getLocation() { return location; }
    public double getWidth() { return width; }
    public double getHeight() { return height; }
}

// Update the main class
public class SwarmDroneSystem {
    public static void main(String[] args) {
        // Initialize structures
        List<Structure> structures = new ArrayList<>();
        structures.add(new Structure(StructureType.BUILDING, 
            new Point2D.Double(0.3, 0.3), 60, 60));
        structures.add(new Structure(StructureType.SHED, 
            new Point2D.Double(0.6, 0.4), 30, 30));
        structures.add(new Structure(StructureType.ROAD, 
            new Point2D.Double(0.2, 0.7), 100, 20));

        // Initialize drone swarm
        List<Transaction> transactions = new ArrayList<>();
        transactions.add(new Transaction("1918856650", -1430, 
            Instant.parse("2024-05-22T17:47:25Z"), 
            Instant.parse("2024-05-22T18:00:12Z")));
        transactions.add(new Transaction("1883934565", -1994,
            Instant.parse("2024-05-08T09:00:22Z"),
            Instant.parse("2024-05-08T09:15:13Z")));

        DroneSwarm swarm = new DroneSwarm();
        swarm.initializeFromTransactions(transactions);
        swarm.executeSwarmOperation();

        // Create and show visualization
        SwingUtilities.invokeLater(() -> {
            VisualizationFrame frame = new VisualizationFrame(swarm, structures);
            frame.setVisible(true);
        });
    }
}
